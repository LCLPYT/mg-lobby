import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'fabric-loom' version '1.2.7'
    id 'maven-publish'
    id 'gradle-build-utils' version '1.5.3'
    id 'kibu-plugin-dev' version '0.5.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = buildUtils.loadProperties('publish.properties')

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = project.maven_group
version = buildUtils.gitVersion()
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()

    maven {
        url 'https://repo.lclpnet.work/repository/internal'
    }

    maven {
        url = 'https://maven.nucleoid.xyz/'
    }
}

sourceSets {
    activity

    main {
        // make activity classes available in the main sourceSet
        compileClasspath += activity.output
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu:${project.kibu_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu-plugins:${project.kibu_plugins_version}"
    modImplementation "xyz.nucleoid:fantasy:${project.fantasy_version}"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.json:json:20230227'

    // bundle these dependencies
    'work.lclpnet:json-config4j:1.0.0'.with {
        implementation it
        bundle (it) { transitive = false }
    }

    'org.apache.commons:commons-compress:1.23.0'.with {
        implementation it
        bundle it
    }

    "work.lclpnet:maze-lib:${project.maze_lib_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    "work.lclpnet:translations4j:${project.translations4j_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    // test dependencies
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

// add main dependencies to the activity sourceSet
configurations {
    activityImplementation.extendsFrom(implementation)

    activityCompileClasspath.extendsFrom(modCompileClasspathMapped)
    activityRuntimeClasspath.extendsFrom(modCompileClasspathMapped)
}

// add minecraft dependencies to activity sourceSet (only available after project evaluation)
afterEvaluate {
    configurations {
        activityCompileClasspath.extendsFrom(minecraftNamedCompile)
        activityRuntimeClasspath.extendsFrom(minecraftNamedRuntime)
    }
}

kibu {
    // add activity sources to the dev plugin loader
    pluginPaths.from(sourceSets.activity.output)
}

loom {
    serverOnlyMinecraftJar()

    runs {
        remove client
    }
}

test {
    useJUnitPlatform()
    systemProperty('fabric.side', 'server')
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.convention(17)
}

processResources {
    dependsOn processActivityResources  // should process activity resources

    // replace placeholders in resources
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

// add activity jar tasks
tasks.register("activityJar", Jar.class) {
    description 'Builds the standalone activity api jar.'
    group 'build'
    archiveClassifier.set("activity-dev")
    destinationDirectory.set(new File(buildDir, "devlibs"))
}

tasks.register('remapActivityJar', RemapJarTask.class) {
    dependsOn tasks.activityJar

    description 'Remaps the built activity jar to intermediary mappings.'
    group 'fabric'
    archiveClassifier.set('activity')

    inputFile.convention(tasks.activityJar.archiveFile)
}

[activityJar, remapActivityJar].each {
    tasks.assemble.dependsOn(it)
}

// tweak jar tasks
[jar, sourcesJar, shadowJar, activityJar].each {
    // include activity sourceSet
    it.from sourceSets.activity.output

    // include license file
    it.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact remapJar
            artifact remapSourcesJar
            artifact remapActivityJar

            pom {
                name = 'Minigame Lobby'
                description = 'A kibu plugin for managing minigame lobbies in FabricMC.'
            }
        }
    }

    buildUtils.setupPublishRepository(repositories, props)
}