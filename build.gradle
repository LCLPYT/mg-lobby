import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'fabric-loom' version '1.2.7'
    id 'maven-publish'
    id 'gradle-build-utils' version '1.2.0'
    id 'kibu-plugin-dev' version '0.3.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = loadProperties.call('publish.properties') as Properties

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = project.maven_group
version = gitVersion.call()
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()

    maven {
        url 'https://repo.lclpnet.work/repository/internal'
    }

    maven {
        url = 'https://maven.nucleoid.xyz/'
    }
}

sourceSets {
    activity

    // make activity classes available in the main sourceSet
    main {
        compileClasspath += activity.output
        runtimeClasspath += activity.output
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu:${project.kibu_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu-plugins:${project.kibu_plugins_version}"

    modImplementation "xyz.nucleoid:fantasy:${project.fantasy_version}"

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.json:json:20220924'

    implementation 'work.lclpnet:json-config4j:1.0.0'
    bundle ('work.lclpnet:json-config4j:1.0.0') { transitive = false }

    implementation 'org.apache.commons:commons-compress:1.23.0'
    bundle 'org.apache.commons:commons-compress:1.23.0'

    implementation "work.lclpnet:maze-lib:${project.maze_lib_version}"
    bundle ("work.lclpnet:maze-lib:${project.maze_lib_version}") { transitive = false }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// add main dependencies to the activity sourceSet
configurations {
    activityImplementation.extendsFrom(implementation)

    activityCompileClasspath.extendsFrom(modCompileClasspathMapped)
    activityRuntimeClasspath.extendsFrom(modCompileClasspathMapped)
}

// add minecraft dependencies to activity sourceSet (only available after project evaluation)
afterEvaluate {
    configurations {
        activityCompileClasspath.extendsFrom(minecraftNamedCompile)
        activityRuntimeClasspath.extendsFrom(minecraftNamedRuntime)
    }
}

loom {
    serverOnlyMinecraftJar()

    runs {
        remove client
    }
}

test {
    useJUnitPlatform()
    systemProperty('fabric.side', 'server')  // required atm for server-only unit tests using mc code
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.getRelease().convention(17)
}

processResources {
    dependsOn processActivityResources  // should process activity resources

    // replace placeholders in resources
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

// add activity jar tasks
tasks.register("activityJar", Jar.class) {
    archiveClassifier.set("activity-dev")
    destinationDirectory.set(new File(buildDir, "devlibs"))
}

tasks.register("remapActivityJar", RemapJarTask.class) {
    dependsOn(tasks.activityJar)

    description("Remaps the built activity jar to intermediary mappings.")
    group("fabric")
    archiveClassifier.set("activity")

    inputFile.convention(tasks.activityJar.archiveFile)
}

[activityJar, remapActivityJar].each {
    tasks.assemble.dependsOn(it)
}

// tweak all jar tasks
[jar, sourcesJar, shadowJar, activityJar].each {
    it.from sourceSets.activity.output

    // include license file
    it.from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact remapJar
            artifact remapSourcesJar
            artifact remapActivityJar

            pom {
                name = 'Minigame Lobby'
                description = 'A kibu plugin for managing minigame lobbies in FabricMC.'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}